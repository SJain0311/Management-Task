import React, { useState } from "react";
import { createUserWithEmailAndPassword, updateProfile } from "firebase/auth";
import { useNavigate, Link } from "react-router-dom";
import firebase from "../firebaseConfig";
import { auth } from "../firebaseConfig";
import { db } from "../firebaseConfig";
import { async } from "@firebase/util";
import { toast } from "react-toastify";
import { Timestamp, collection, addDoc, setDoc, doc } from "firebase/firestore";

const checkboxes = [
  { id: 1, text: "Reading" },
  { id: 2, text: "Watching Movie" },
  { id: 3, text: "Dancing" },
  { id: 4, text: "Swimming" },
];
const ManagerSignup = (props) => {
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    fname: "",
    lname: "",
    gender: "",
    hobbies: "",
  });

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  const createUserDocument = async (user, formData) => {
    if (!user) return;
    const { email } = formData;
    const { password } = formData;
    const { fname } = formData;
    const { lname } = formData;
    const { gender } = formData;
    const { hobbies } = formData;

    await setDoc(doc(db, "managerData", `${user?.user.uid}`), {
      email,
      password,
      fname,
      lname,
      gender,
      hobbies,
      //   createdAt: new Date(),
    });
    console.log(user)
  };

  const handleSignUp = async (formData) => {
    // e.preventDefault();
    console.log(formData);
    await createUserWithEmailAndPassword(
      auth,
      formData.email,
      formData.password
    )
      .then((res) => {
        if (res) {
          createUserDocument(res, formData);
          console.log("res", res, "hi", formData);
          // props.toggle();
          toast.success("User Register Successfully");
        }
      })
      .catch((error) => {
        console.log("error", error);
        switch (error.code) {
          case "email-already-use-in":
            toast.error(error.message);
            break;
          case "invalid-email":
            toast.error(error.message);
            break;
        }
      });
  };
  return (
    <div>
      <div className="m-5">
        <center>
          <h1 style={{ color: "#0d6efd" }}>Manager Signup</h1>
        </center>
        <form onSubmit={(e) => handleSignUp(e)}>
          <div className="form-group m-2">
            <label for="exampleInputEmail1">First Name</label>
            <input
              type="fname"
              className="form-control m-1"
              id="exampleInputEmail1"
              placeholder="Enter First Name"
              name="fname"
              value={formData.fname}
              required
              onChange={(e) => {
                handleChange(e);
              }}
            />
          </div>
          <div className="form-group m-2">
            <label for="exampleInputEmail1">Last Name</label>
            <input
              type="lname"
              name="lname"
              className="form-control m-1"
              id="exampleInputEmail1"
              placeholder="Enter Last Name"
              value={formData.lname}
              required
              onChange={(e) => {
                handleChange(e);
              }}
            />
          </div>
          <div className="form-group m-2">
            <label for="exampleInputEmail1">Email</label>
            <input
              type="email"
              name="email"
              className="form-control m-1"
              id="exampleInputEmail1"
              placeholder="Enter Email"
              value={formData.email}
              required
              onChange={(e) => {
                handleChange(e);
              }}
            />
          </div>
          <fieldset className="form-group m-2">
            <div className="row">
              <legend className="col-form-label col-sm-2 pt-0">Gender</legend>
              <div className="col-sm-10">
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="gridRadios"
                    id="gridRadios1"
                    value="option1"
                    checked
                  />
                  <label className="form-check-label" for="gridRadios1">
                    Female
                  </label>
                </div>
                <div className="form-check">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="gridRadios"
                    id="gridRadios2"
                    value="option2"
                  />
                  <label className="form-check-label" for="gridRadios2">
                    Male
                  </label>
                </div>
                <div className="form-check disabled">
                  <input
                    className="form-check-input"
                    type="radio"
                    name="gridRadios"
                    id="gridRadios3"
                    value="option3"
                    disabled
                  />
                  <label className="form-check-label" for="gridRadios3">
                    Other
                  </label>
                </div>
              </div>
            </div>
          </fieldset>
          <div>
            Please Select Your Hobbies:
            <br />
            <input type="checkbox" name="hobbies" id="male" />
            <label>Sing</label>
            <br />
            <input type="checkbox" name="dance" id="female" />
            <label>Dance</label>
            <br />
            <input type="checkbox" name="read" id="other" />
            <label>Read</label>
            <br />
            <br />
          </div>

          <button type="submit" className="btn btn-primary">
            Submit
          </button>
          <p>
            Not Have an account? <Link to="/managerSignup">Signup</Link>
          </p>
        </form>
      </div>
    </div>
  );
};

export default ManagerSignup;
